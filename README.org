[[./hercules.png]]

An auto-magical, =which-key= based =hydra= banisher.

* Overview
** Standalone
In at most 7 lines of set-up code, =hercules= lets you call any group
of related command sequentially with no prefix keys, while showing a
handy popup to remember the bindings for those commands. He can create
both of these (the grouped commands, and the popup) from any
keymap. Here's what that looks like:

#+BEGIN_SRC emacs-lisp
  (hercules-def
   :toggle-funs #'macrostep-mode
   :keymap 'macrostep-keymap
   :pseudo-mode-fun #'macrostep-mode)
#+END_SRC

[[./hercules.gif]]

** Relative to Other Packages
If only there was a way to make a =hydra= without having to list all
the bindings explicitly... Kind of like =which-key=...

=hercules= implements the functionality of
[[https://github.com/abo-abo/hydra][hydra]] by leveraging
[[https://github.com/justbur/emacs-which-key][which-key]] auto-magic.

Unlike =hydra=, =hercules= entry and exit points are associated with
functions, not keys.  Keys, on the other hand, are defined by
traditional keymaps, which you can use as-is, or tweak to your liking
using your tool of choice. =hercules= doesn't force this choice on
you. That said, I highly recommend
[[https://github.com/noctuid/general.el][general.el]].

Ultimately, =hercules= saves you time by relying on work that has
already been done for you --- usually, but not necessarily, as part of
a time-tested minor-mode. The resulting interfaces tend to be more
comprehensive than home-grown =hydras=, thus aiding you in
discovering new functionality.

Allow me to illustrate my point using an example from =hydras= README:

*** Hydra Setup
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-buffer-menu (:color pink
                               :hint nil)
    "
  ^Mark^             ^Unmark^           ^Actions^          ^Search
  ^^^^^^^^-----------------------------------------------------------------
  _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  _~_: modified
  "
    ("m" Buffer-menu-mark)
    ("u" Buffer-menu-unmark)
    ("U" Buffer-menu-backup-unmark)
    ("d" Buffer-menu-delete)
    ("D" Buffer-menu-delete-backwards)
    ("s" Buffer-menu-save)
    ("~" Buffer-menu-not-modified)
    ("x" Buffer-menu-execute)
    ("b" Buffer-menu-bury)
    ("g" revert-buffer)
    ("T" Buffer-menu-toggle-files-only)
    ("O" Buffer-menu-multi-occur :color blue)
    ("I" Buffer-menu-isearch-buffers :color blue)
    ("R" Buffer-menu-isearch-buffers-regexp :color blue)
    ("c" nil "cancel")
    ("v" Buffer-menu-select "select" :color blue)
    ("o" Buffer-menu-other-window "other-window" :color blue)
    ("q" quit-window "quit" :color blue))

  (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
#+END_SRC

*** Hercules Setup
NOTE: This is the equivalent of hydra's buffer setup applied to window
manipulation, since I don't use buffer-menu. Implementing it yourself
should be trivial.
#+BEGIN_SRC emacs-lisp
  (hercules-def
   :show-funs '(windresize windresize-help)
   :hide-funs '(windresize-exit windresize-cancel-and-quit)
   :keymap 'windresize-map
   :pseudo-mode-fun #'windresize)
#+END_SRC

** Bonus
Last, and definitely least, =hercules= provides a more consistent
interface for all your keybinding popup needs (the same =which-key= UI
throughout your config).

* Motivation 
As mentioned, I initially wrote =hercules= to avoid reinventing the
wheel by creating elaborate hydras for minor-modes that already worked
like they had them, merely lacking the handy popup. These include:

- =macrostep-mode=
- =edebug-mode=
- =debugger-mode=
- =windresize=
- many more
  
But =hercules= can use any keymap you have lying around. It can also
associate it with an arbitrary function on entry. You might recognize
this description --- It creates a pseudo-mode with a cheat-sheet
thrown in for good measure. For example, you can steal =org-babel-map=
and whip up what used to be a massive =hydra= in seconds:

#+BEGIN_SRC emacs-lisp
  (hercules-def
   :show-funs '(org-babel-next-src-block
                org-babel-previous-src-block)
   ;; or whatever function you usually end up being
   ;; done with babel after
   :hide-funs '(org-babel-tangle-publish)
   :keymap 'org-babel-map
   :pseudo-mode t)
#+END_SRC

* Interface
The only userland macro you should concern yourself with is
=hercules-def=.

** Arguments
The following arguments define entry and exit point functions that
invoke =hercules= (both lists and single functions work):
 
- TOGGLE-FUNS :: Processed with =hercules--toggle-funs=.
- SHOW-FUNS :: Processed with =hercules--show-funs=.
- HIDE-FUNS :: Processed with =hercules--hide-funs=.

The following mutually arguments provide a shorthand for
whittling down `hercules' pop-ups if you don't want to get your
hands dirty with keymaps and prefer a more minimal UI (both lists
and single keys/functions work, and whitelists take precedence
over blacklists):

- BLACKLIST-KEYS :: Processed with `hercules--graylist-after-load'
- WHITELIST-KEYS :: Processed with `hercules--graylist-after-load'
- BLACKLIST-FUNS :: Processed with `hercules--graylist-after-load'
- WHITELIST-FUNS :: Processed with `hercules--graylist-after-load'

Now to the slightly less obvious options:

- KEYMAP :: The keymap to display in =hercules=. If it is nil, it is
  assumed that the function you are calling will result in a
  =which-key--show-popup= call. This might be desirable if you wish to
  enable =hercules= for =which-key-show-top-level= or something
  similar. For example, this is what I have in my config so I can
  scroll to the =which-key= page of interest when I'm dealing with
  some fringe Evil commands I kind of forgot. Then I keep it around
  until I feel comfortable enough to kill it with
  =keyboard-quit=. This has the side effect of killing any =hercules=
  on =keyboard-quit=, but then again all commands are supposed to obey
  it.
  
 #+BEGIN_SRC emacs-lisp
   (hercules-def
    :show-funs '(which-key-show-top-level)
    :hide-funs '(keyboard-quit keyboard-escape-quit))
 #+END_SRC 
 
- PACKAGE :: If you are using any of BLACKLIST-KEYS, WHITELIST-KEYS,
  BLACKLIST-FUNS, or WHITELIST-FUNS, and the KEYMAP you're dealing is
  in a lazy-loaded package, you must also specify the package it
  belongs to as a quotes symbol using this argument.

- PSEUDO-MODE :: Whether to create a pseudo-mode by setting a KEYMAP
  as an overriding transient map. This is handy if the function you
  are binding =hercules= to isn't actually a mode, or is fighting for
  keybindings with other minor-modes. The keymap stops taking
  precedence over other keymaps once a key outside of it is
  pressed. See =set-transient-map= for details. To take advantage of
  this capability, it isn't enough to call =hercules-def=. You should
  bind its return value (a symbol) to the key you plan to use to enter
  the PSEUDO-MODE. E.g.:

#+BEGIN_SRC emacs-lisp
  (my:elisp::general-def
    "m" '(:ignore t :wk "macrostep")
    "m." (hercules-def
          :toggle-funs #'macrostep-mode
          :keymap 'macrostep-keymap
          :pseudo-mode-fun #'macrostep-mode)
    "me" #'macrostep-expand
    "mc" #'macrostep-collapse
    "mn" #'macrostep-next-macro
    "mp" #'macrostep-prev-macro)
#+END_SRC
 
- PSEUDO-MODE-FUN :: The command to call when entering
  PSEUDO-MODE. You can omit it if you just want to summon =hercules=
  without actually doing anything right away.
